*****************************
*linux-x64-nasm-cheatsheet *
*****************************

Registers
=========

_ = Register name (A, B, C, D or Number)
Lists are the register names for: 64 bit, 32 bit, 16 bit, 8 bit

- General purpose:

A (accumulator), B (base, addressing), C (counter, iterations), D (data)
R_X, E_X, _X, _L

- Stack:

Stack pointer: RSP, ESP, SP, SPL
Frame pointer: RBP, EBP, BP, BPL

- Other:

RDI, EDI, DI, DIL
RSI, ESI, SI, SIL

R0 .. R15:
R_, R_D, R_W, R_B

XMM0 .. XMM15 (128 bit floating point)


Calling C
=========

Arguments (first to last) in the following registers (64 bit representations):
RDI, RSI, RDX, RCX, R8, R9, then stack (in reverse, have to be cleaned up by the caller!)
XMM0 - XMM7 for floats

Return values are stored in RAX (int) or XMM0 (float)

RBP, RBX, R12, R13, R14, R15 are not changed by the called function, all others may be

Align stack pointer (RSP..) to 16 byte, calling pushes 8 bytes!


Data
====

8 bit, 16 bit, 32 bit, 64 bit:
db, dw, dd, ddq/do

float: dd, double: dq, extended precision: dt


Conditionals
============

cmp op1, op2 -> mimic sub op1, op2 but only change zero and carry flag for comparing

Prefixes:
j_ x -> jump to x if _
cmov_ x, y -> conditional mov x, y if _
setc_ x -> set x to 1 if _, x is 8 bit reg

Many suffixes, including:
a (above, >), ae (above or equal, >=), b (below, <), be (below or equal, <=), e (equal, =), ne (not equal, !=)


Program structure
=================

global <entry> -> exposes entry point
extern <function> -> declares a function in another linked .o file (e.g. c function, other asm file)

section <option> -> sets section, usually:
.text -> program code
.data -> data


Syscalls
========

- put syscall number in EAX (e.g. 60 for exit, 1 for write)
- put arguments in the registers (see above) as if syscall was a c function
- execute `syscall`


Sources
=======

Main: `cs.lmu.edu/~ray/notes/nasmtutorial`
Registers: `https://tutorialspoint.com/assembly_programming/assembly_registers.htm`
Conditionals: `https://de.wikibooks.org/wiki/Assembler-Programmierung_für_x86-Prozessoren/_Sprünge_und_Schleifen`
